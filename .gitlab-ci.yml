stages:
- prepare
- prebuild
- test
- build
- package
- release

variables:
  CI_IMAGE: registry.gitlab.com/gitlab-org/gitlab-runner/ci:1.8-1
  GOROOT: /usr/local/go

image: $CI_IMAGE

before_script:
- source ci/prepare

.docker: &docker
  services:
  - docker:dind
  variables:
    CI_IMAGE: registry.gitlab.com/gitlab-org/gitlab-runner/ci:1.8-1
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://docker:2375
  tags:
  - docker

#
# Prepare stage
#

.image_builder: &image_builder
  <<: *docker
  stage: prepare
  image: docker:git
  before_script: []
  script:
  - source ./ci/build_ci_image

prepare ci image:
  <<: *image_builder
  variables:
    BUILD_IMAGE: $CI_IMAGE
    BUILD_DOCKERFILE: ./dockerfiles/ci/Dockerfile
  only:
  - /\Adocker-ci-image\/.*/

prepare alpine-no-root image:
  <<: *image_builder
  variables:
    BUILD_IMAGE: registry.gitlab.com/gitlab-org/gitlab-runner/alpine-no-root:latest
    BUILD_DOCKERFILE: ./tests/dockerfiles/alpine-no-root/Dockerfile
  only:
  - /\Adocker-alpine-no-root-image\/.*/

#
# Prebuild stage
#

bindata:
  <<: *docker
  stage: prebuild
  script:
  - make docker
  artifacts:
    paths:
    - out/docker/prebuilt-x86_64.tar.xz
    - out/docker/prebuilt-arm.tar.xz
    - executors/docker/bindata.go
    expire_in: 7d

clone test repo:
  stage: prebuild
  script:
  - mkdir tmp
  - succeed=0
  - for i in {1..3}; do git clone https://gitlab.com/gitlab-org/gitlab-test.git tmp/gitlab-test && succeed=1 && break; echo "retrying"; done
  - '[[ "$succeed" -eq 1 ]]'
  artifacts:
    paths:
    - tmp/gitlab-test
    expire_in: 7d

#
# Test stage
#

codequality:
  stage: test
  image: docker:git
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    CODECLIMATE_FORMAT: json
  cache: {}
  dependencies: []
  before_script: []
  script:
    - ./scripts/codequality analyze -f json --dev | tee codeclimate.json
  artifacts:
    paths: [codeclimate.json]
    expire_in: 1 week

unit tests (no race):
  stage: test
  script:
  - source ci/touch_make_dependencies
  - make test
  tags:
  - docker

unit tests:
  stage: test
  variables:
    CGO_ENABLED: 1
    TESTFLAGS: -cover -race
  allow_failure: true
  script:
  - source ci/touch_make_dependencies
  - make test
  tags:
  - docker

docs check links:
  image: "registry.gitlab.com/gitlab-org/gitlab-build-images:nanoc-bootstrap-ruby-2.4-alpine"
  stage: test
  cache: {}
  dependencies: []
  before_script: []
  script:
    - mv docs/ /nanoc/content/
    - cd /nanoc
    # Build HTML from Markdown
    - bundle exec nanoc
    # Check the internal links
    - bundle exec nanoc check internal_links

docker executor:
  <<: *docker
  stage: test
  script:
  - source ci/touch_make_dependencies
  - go test -cover ./executors/docker/

integration windows:
  stage: test
  before_script:
  - $GODIR = "$env:GOPATH\src\gitlab.com\gitlab-org"
  - $target_path = "$GODIR\gitlab-runner"
  - $current_path = pwd
  - md $GODIR -Force
  - if (Test-Path $target_path) { cmd /c rmdir $target_path }
  - cmd /c mklink /D $target_path $current_path
  - cd $GODIR\gitlab-runner
  script:
  - $packages = (go list ./... | findstr -v "\/vendor\/" | Out-String | %{$_ -replace "\r\n"," "})
  - $testCommand = "go test $packages"
  - Invoke-Expression $testCommand
  - if ( $LASTEXITCODE -ne 0 ) { exit $LASTEXITCODE }
  allow_failure: true
  only:
  - /.*/@gitlab-org/gitlab-runner
  tags:
  - integration
  - windows

race conditions detector:
  <<: *docker
  stage: test
  script:
  - source ci/touch_make_dependencies
  - make check_race_conditions

#
# Build stage
#

.binaries: &binaries
  stage: build
  script:
  - source ci/touch_make_dependencies
  - export platforms=$(echo $CI_JOB_NAME | sed 's|binaries ||')
  - make build BUILD_PLATFORMS="-osarch='$platforms'"
  artifacts:
    paths:
    - out/binaries/
    expire_in: 7d
  tags:
  - docker

binaries darwin/386 darwin/amd64: *binaries
binaries freebsd/386 freebsd/amd64 freebsd/arm: *binaries
binaries linux/386 linux/amd64 linux/arm: *binaries
binaries windows/386 windows/amd64: *binaries

#
# Package stage
#

.packages: &packages
  stage: package
  script:
  - mkdir -p out/docker
  - touch out/docker/prebuilt-x86_64.tar.xz
  - touch out/docker/prebuilt-arm.tar.xz
  - touch executors/docker/bindata.go
  - source ci/touch_make_dependencies
  - make ${CI_JOB_NAME}
  artifacts:
    paths:
    - out/deb/
    - out/rpm/
    expire_in: 7d
  tags:
  - docker

package-deb: *packages
package-rpm: *packages

#
# Release stage
#

.release_docker_images: &release_docker_images
  <<: *docker
  stage: release
  script:
  - source ci/touch_make_dependencies
  - make release_docker_images
  tags:
  - release

.release: &release
  stage: release
  before_script:
  - source ci/touch_make_dependencies
  tags:
  - release

.release_s3: &release_s3
  <<: *release
  script:
  - make release_s3

.release_packagecloud: &release_packagecloud
  <<: *release
  script:
  - make release_packagecloud

.release_development: &release_development
  only:
  - branches@gitlab-org/gitlab-runner
  except:
  - master@gitlab-org/gitlab-runner

.release_bleeding_edge: &release_bleeding_edge
  only:
  - master@gitlab-org/gitlab-runner
  - /\Av[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+\Z/@gitlab-org/gitlab-runner

.release_stable: &release_stable
  only:
  - /\Av[0-9]+\.[0-9]+\.[0-9]+\Z/@gitlab-org/gitlab-runner

development S3:
  <<: *release_s3
  <<: *release_development
  environment:
    name: development/s3/${CI_COMMIT_REF_NAME}
    url: https://gitlab-runner-downloads.s3.amazonaws.com/${CI_COMMIT_REF_NAME}/index.html

bleeding edge S3:
  <<: *release_s3
  <<: *release_bleeding_edge
  environment:
    name: bleeding_edge/s3
    url: https://gitlab-runner-downloads.s3.amazonaws.com/${CI_COMMIT_REF_NAME}/index.html

bleeding edge packagecloud:
  <<: *release_packagecloud
  <<: *release_bleeding_edge
  environment:
    name: bleeding_edge/packagecloud
    url: https://packages.gitlab.com/runner/unstable

bleeding edge docker images:
  <<: *release_docker_images
  <<: *release_bleeding_edge
  environment:
    name: bleeding_edge/docker_images
    url: https://hub.docker.com/r/gitlab/gitlab-runner/tags/

stable S3:
  <<: *release_s3
  <<: *release_stable
  environment:
    name: stable/s3
    url: https://gitlab-runner-downloads.s3.amazonaws.com/${CI_COMMIT_REF_NAME}/index.html

stable packagecloud:
  <<: *release_packagecloud
  <<: *release_stable
  environment:
    name: stable/packagecloud
    url: https://packages.gitlab.com/runner/gitlab-runner

stable docker images:
  <<: *release_docker_images
  <<: *release_stable
  environment:
      name: stable/docker_images
      url: https://hub.docker.com/r/gitlab/gitlab-runner/tags/
